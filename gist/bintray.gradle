apply plugin: 'com.jfrog.bintray'

version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
File propertiesFile = project.file('secret.properties')
if (propertiesFile.exists()) {
    properties.load(propertiesFile.newDataInputStream())
}

bintray {
    println("ENVIRONMENT KEYS: " + System.getenv().keySet())

    user = getPropertyOrEnv("BINTRAY_USERNAME", properties)
    key = getPropertyOrEnv("BINTRAY_API_KEY", properties)

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = bintrayOrg
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true
                passphrase = properties.getProperty("bintray.gpg.password")
            }
        }
    }
}

static def getPropertyOrEnv(String key, Properties properties) {
    if (properties.getProperty(key) != null) {
        return properties.getProperty(key)
    } else if (System.getenv(key) != null) {
        return System.getenv(key)
    } else {
        throw new Exception(key + " must be set in either secret.properties or as an environment variable")
    }
}